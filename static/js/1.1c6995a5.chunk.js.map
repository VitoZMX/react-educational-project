{"version":3,"file":"static/js/1.1c6995a5.chunk.js","mappings":"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","sources":["webpack://react-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://react-project/./src/components/Profile/ProfileInfo/ProfileDataForm.module.css?5c5c","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backgroundProfile\":\"ProfileInfo_backgroundProfile__wLXXj\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mlQUx\",\"fullName\":\"ProfileInfo_fullName__ha-0w\",\"contact\":\"ProfileInfo_contact__dPimF\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (string: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks:React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b><span onDoubleClick={activateEditMode}> {props.status || 'No status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <b>Status:</b><input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks","// extracted by mini-css-extract-plugin\nexport default {\"fullName\":\"ProfileDataForm_fullName__5RvdB\",\"contact\":\"ProfileDataForm_contact__eQLJW\"};","import React from 'react'\r\nimport s from './ProfileDataForm.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport styles from '../../common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType>\r\n    = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save profile data</button>\r\n        </div>\r\n        {error && <div className={styles.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <div className={s.fullName}>{createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}</div>\r\n        </div>\r\n        <div>\r\n            <div><b>Looking for a\r\n                job:</b> {createField<ProfileTypeKeys>(\"lookingForAJob\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div><b>My professional skills:</b>\r\n                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            <div><b>About me:</b> {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}</div>\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contact:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/*todo: create some solution for embedded objects*/}\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport NoAvatarImg from '../../../assets/images/noimg.jpeg'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        /*todo: remove then*/\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || NoAvatarImg}/>\r\n                <div>\r\n                    {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}\r\n                                   profile={profile} isOwner={isOwner}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>Edit profile</button>\r\n        </div>}\r\n        <div className={s.fullName}>{profile.fullName}</div>\r\n        <div>\r\n            <div><b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            {profile.lookingForAJob ?\r\n                <div><b>My professional skills:</b> {profile.lookingForAJobDescription}</div> : null}\r\n        </div>\r\n        <div><b>About me:</b> {profile.aboutMe}</div>\r\n        <div>\r\n            <b>Contact:</b>\r\n            {Object.keys(profile.contacts)\r\n                .map(key => {\r\n                    return <Contact key={key} contactTitle={key}\r\n                                    contactValue={profile.contacts [key as keyof ContactsType]}/>\r\n                })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}: </b>{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"conteinerPosts\":\"MyPosts_conteinerPosts__Aytkj\",\"posts\":\"MyPosts_posts__a3lX0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__wBQrE\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\nimport photoImg from '../../../../assets/images/avaCat.jpeg'\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={photoImg} alt='img'/>\r\n            <span>{props.message}</span>\r\n            <div><span>like {props.likeCount}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../../../../common/FormsControls/FormsControls'\r\nimport {required} from '../../../../../utils/validators/validators'\r\nimport React from 'react'\r\n\r\ntype PropsType = {}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFromValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> =\r\n    (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    {createField<AddPostFromValuesTypeKeys>('You post', 'newPostText',\r\n                        [required], Input)}\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                    {/*<button>Remove</button>*/}\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostForm, {AddPostFormValuesType} from \"./Post/AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    console.log('RENDER MyPosts')\r\n\r\n    let postElements = [...props.posts]\r\n        .reverse()\r\n        .map(p => <Post message={p.message} key={p.id} likeCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.conteinerPosts}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized","import React from 'react'\r\nimport {actions} from '../../../redux/profile-reducer'\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} savePhoto={props.savePhoto}\r\n                         profile={props.profile} status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, {useEffect} from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer'\r\nimport {useNavigate, useParams} from 'react-router-dom'\r\nimport {RouteProps} from 'react-router'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type PathParamsType = {\r\n    userId?: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteProps\r\n\r\nconst ProfileContainer: React.FC<PropsType> = (props) => {\r\n    const navigate = useNavigate()\r\n    const params = useParams<PathParamsType>()\r\n\r\n    useEffect(() => {\r\n        const refreshProfile = async () => {\r\n            let userId = params.userId ? +params.userId : props.authorizedUserId\r\n            if (!userId) {\r\n                console.error(\"ID should exist in URI params or in state ('authorizedUserId')\")\r\n                return\r\n            }\r\n            await props.getUserProfile(userId)\r\n            props.getStatus(userId)\r\n        }\r\n\r\n        refreshProfile()\r\n    }, [params.userId, props.authorizedUserId, props.getUserProfile, props.getStatus])\r\n\r\n    const isOwner = !params.userId\r\n\r\n    return (\r\n        <Profile\r\n            {...props}\r\n            isOwner={isOwner}\r\n            profile={props.profile}\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n            savePhoto={props.savePhoto}\r\n        />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n)(ProfileContainer)\r\n\r\n/*\r\n ---Классовая компонента которую так и не получиолось исправить в RouteComponentProps---\r\nimport React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer'\r\nimport { useLocation, useNavigate, useParams} from 'react-router-dom'\r\nimport {RouteComponentProps} from 'react-router-dom'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../redux/redux-store'\r\nimport {ProfileType} from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nexport type PathParamsType = {\r\n    userId?: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props)\r\n    }\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.params.userId != prevProps.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation()\r\n        let navigate = useNavigate()\r\n        let params = useParams()\r\n        return (\r\n            <Component {...props} router={{location, navigate, params}}/>\r\n        )\r\n    }\r\n\r\n    return ComponentWithRouterProp\r\n}\r\n\r\n// export default compose(\r\n//     withAuthRedirect,\r\n//     connect(mapStateToProps, {\r\n//         getUserProfile, getStatus,\r\n//         updateStatus, savePhoto, saveProfile\r\n//     }), withRouter)(ProfileContainer)\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)*/"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","styles","s","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","savePhoto","saveProfile","Preloader","src","photos","large","NoAvatarImg","target","files","length","ProfileStatusWithHooks","ProfileDataForm","initialValues","formData","then","photoImg","alt","message","likeCount","required","MyPosts","console","log","postElements","_toConsumableArray","posts","reverse","p","Post","likesCount","id","AddPostForm","values","addPost","newPostText","React","connect","state","profilePage","actions","ProfileInfo","MyPostsContainer","compose","authorizedUserId","auth","userId","isAuth","getUserProfile","getStatus","useNavigate","params","useParams","refreshProfile","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","Profile","_objectSpread"],"sourceRoot":""}