{"version":3,"file":"static/js/665.b1972da8.chunk.js","mappings":"wLACA,G,QAAyB,4BAAzB,EAA6D,2B,mBCkB7D,EAVwC,SAACA,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAW,IAAMA,EAASC,UACtCH,EAAAA,EAAAA,KAACI,EAAAA,GAAO,CAACC,GAAIP,EAAMG,UAAWC,EAAW,IAAMA,EAASC,SAAEN,EAAMS,QAG5E,EChBA,EAA0B,yBCY1B,EANqC,SAACT,GAClC,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEN,EAAMU,SAE1C,ECVA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0B,6BCKrGC,GAAcC,EAAAA,EAAAA,GAAiB,IAqBrC,GAAeC,EAAAA,EAAAA,GAAoC,CAACC,KAAM,2BAA1D,EAfM,SAACd,GAEH,OACIe,EAAAA,EAAAA,MAAA,QAAMC,SAAUhB,EAAMiB,aAAaX,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,OAAAG,UACKY,EAAAA,EAAAA,IAA0C,qBAAsB,iBAC7D,CAACC,EAAAA,EAAUR,GAAcS,EAAAA,OAEjCjB,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,aAIxB,ICeA,EAxBoC,SAACN,GAEjC,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAIvB,EAAAA,EAAAA,KAACwB,EAAU,CAAClB,KAAMiB,EAAEjB,KAAiBP,GAAIwB,EAAExB,IAAZwB,EAAExB,GAAe,IACzF0B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI3B,EAAAA,EAAAA,KAAC4B,EAAO,CAACrB,QAASoB,EAAEpB,SAAcoB,EAAE5B,GAAK,IAMxF,OACIa,EAAAA,EAAAA,MAAA,OAAKX,UAAWC,EAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAeC,SAC1BiB,KAELR,EAAAA,EAAAA,MAAA,OAAKX,UAAWC,EAAWC,SAAA,EACvBH,EAAAA,EAAAA,KAAA,OAAAG,SAAMsB,KACNzB,EAAAA,EAAAA,KAAC6B,EAAc,CAAChB,SAXR,SAACiB,GACjBjC,EAAMkC,YAAYD,EAAOE,eAC7B,SAaJ,E,2CCjCIC,EAA6B,SAACf,GAAmB,MAAM,CACvDgB,OAAQhB,EAAMiB,KAAKD,OACtB,E,ICOD,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAG2BmB,EAAAA,EAAAA,GAAA,GAAMC,EAAAA,KDA1B,SAA+BC,GAUlC,OAAOH,EAAAA,EAAAA,IACHJ,EAA4B,CAAC,EAD1BI,EAR+D,SAACxC,GACnE,IAAKqC,EAAwBrC,EAAxBqC,OAAWO,GAASC,EAAAA,EAAAA,GAAI7C,EAAK8C,GAElC,OAAKT,GAEElC,EAAAA,EAAAA,KAACwC,GAAgBF,EAAAA,EAAAA,GAAA,GAAMG,KAFVzC,EAAAA,EAAAA,KAAC4C,EAAAA,GAAQ,CAACvC,GAAG,UAGrC,GAKJ,GCdA,CAGEwC,E","sources":["webpack://react-project/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","webpack://react-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__B93v1\",\"active\":\"DialogItem_active__TSZF8\"};","import React from 'react'\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + \" \" + s.active}>\r\n            <NavLink to={path} className={s.dialog + \" \" + s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"massage\":\"Message_massage__K4b4X\"};","import React from 'react'\r\nimport s from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.massage}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__u-7aq\",\"dialogsItems\":\"Dialogs_dialogsItems__oZk35\",\"massages\":\"Dialogs_massages__6TCfm\"};","import {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport React from 'react'\r\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators'\r\nimport {NewMessageFormValuesType} from '../Dialogs'\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('Enter your message', 'newMessageBody',\r\n                    [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm)","import React from 'react'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport s from './Dialogs.module.css'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\nimport {InitialStateType} from '../../redux/dialogs-reducer'\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody:string\r\n}\r\n\r\nconst Dialogs:React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.massages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import {Navigate} from 'react-router-dom'\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {AppStateType} from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: any) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Navigate to='/login'/>\r\n\r\n        return <WrappedComponent  {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n}","import React from 'react'\r\nimport {actions} from '../../redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["props","path","id","_jsx","className","s","children","NavLink","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","_jsxs","onSubmit","handleSubmit","createField","required","Textarea","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","_objectSpread","actions","WrappedComponent","restProps","_objectWithoutProperties","_excluded","Navigate","Dialogs"],"sourceRoot":""}