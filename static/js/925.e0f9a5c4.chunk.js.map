{"version":3,"file":"static/js/925.e0f9a5c4.chunk.js","mappings":"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","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport userPhoto from '../../assets/images/noimg.jpeg'\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket\r\n\r\n        const closeHandler = () => {\r\n            console.log('CLOSE WS')\r\n            setTimeout(createChannel, 2000)\r\n        }\r\n\r\n        function createChannel() {\r\n            ws?.removeEventListener('close', closeHandler)\r\n            ws?.close()\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            ws?.addEventListener('close', closeHandler)\r\n            setWsChannel(ws)\r\n        }\r\n\r\n        createChannel()\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler)\r\n            ws.close()\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        <Messages wsChannel={wsChannel}/>\r\n        <AddMessageForm wsChannel={wsChannel}/>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        let messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data)\r\n            setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n        }\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    return <div style={{height: '600px', overflowY: 'auto'}}>\r\n        {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = ({message}) => {\r\n    return <div>\r\n        <div style={{display: 'flex', alignItems: 'center'}}>\r\n            <img src={message.photo != null ? message.photo : userPhoto}\r\n                 style={{borderRadius: '50%', width: '50px',}}/>\r\n            <div style={{margin: ' 8px  8px '}}>\r\n                <b>{message.userName}</b>\r\n                <br/>\r\n                <a>ID: {message.userId}</a>\r\n            </div>\r\n        </div>\r\n        <br/>\r\n        <h3>{message.message}</h3>\r\n        <hr/>\r\n    </div>\r\n}\r\n\r\nconst AddMessageForm: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [message, setMessage] = useState('')\r\n    const [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n    useEffect(() => {\r\n        let openHandler = () => {\r\n            setReadyStatus('ready')\r\n        }\r\n\r\n        wsChannel?.addEventListener('open', openHandler)\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler)\r\n        }\r\n    }, [wsChannel])\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message.trim()) {\r\n            return\r\n        }\r\n        wsChannel?.send(message)\r\n        setMessage('')\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={wsChannel === null || readyStatus !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","_useState","useState","_useState2","_slicedToArray","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","_ws","_ws2","_ws3","removeEventListener","close","WebSocket","addEventListener","_jsxs","children","_jsx","Messages","AddMessageForm","_ref","_useState3","_useState4","messages","setMessages","messageHandler","e","newMessages","JSON","parse","data","prevMessages","concat","_toConsumableArray","style","height","overflowY","map","m","index","Message","message","_ref2","display","alignItems","src","photo","userPhoto","borderRadius","width","margin","userName","userId","_ref3","_useState5","_useState6","setMessage","_useState7","_useState8","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","trim","send"],"sourceRoot":""}